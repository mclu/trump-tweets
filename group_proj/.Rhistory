test_pred = predict(tune.out$best.model, newdata = test)
sum((test_pred != test$delta)) / dim(test)[1]
idx = sample(1:nrow(new_dat), size = floor(nrow(new_dat)*0.9))
train = new_dat[idx,]
train$delta = as.factor(train$delta)
dat = read.csv("https://raw.githubusercontent.com/mclu/503-project/master/combined_cleaned.csv")
dat = dat[,-1]
vars = c("retweets", "favorites", "ss_compound", "topic", "delta", "presidency")
new_dat = dat[vars]
set.seed(1)
idx = sample(1:nrow(new_dat), size = floor(nrow(new_dat)*0.9))
train = new_dat[idx,]
train$delta = as.factor(train$delta)
test = new_dat[-idx,]
rf = randomForest(delta ~ favorites + retweets + ss + topic + presidency,
data = train, mtry = floor(sqrt(5)),
importance = TRUE, ntree = 1000, cp = 0.001)
pred = predict(rf, newdata = test)
rf = randomForest(delta ~ favorites + retweets + ss_compound + topic + presidency,
data = train, mtry = floor(sqrt(5)),
importance = TRUE, ntree = 1000, cp = 0.001)
pred = predict(rf, newdata = test)
mean(pred != test$delta)
set.seed(123)
idx = sample(1:nrow(new_dat), size = floor(nrow(new_dat)*0.9))
train = new_dat[idx,]
train$delta = as.factor(train$delta)
test = new_dat[-idx,]
rf = randomForest(delta ~ favorites + retweets + ss_compound + topic + presidency,
data = train, mtry = floor(sqrt(5)),
importance = TRUE, ntree = 1000, cp = 0.005)
pred = predict(rf, newdata = test)
mean(pred != test$delta)
rf = randomForest(delta ~ favorites + retweets + ss_compound + topic + presidency,
data = train, mtry = floor(sqrt(5)),
importance = TRUE, ntree = 1000)
pred = predict(rf, newdata = test)
mean(pred != test$delta)
1 - .4056
set.seed(1)
idx = sample(1:nrow(new_dat), size = floor(nrow(new_dat)*0.8))
train = new_dat[idx,]
train$delta = as.factor(train$delta)
test = new_dat[-idx,]
rf = randomForest(delta ~ favorites + retweets + ss_compound + topic + presidency,
data = train, mtry = floor(sqrt(5)),
importance = TRUE, ntree = 1000)
pred = predict(rf, newdata = test)
mean(pred != test$delta)
rf = randomForest(delta ~ favorites + retweets + ss_compound + topic + presidency,
data = train, mtry = floor(sqrt(5)),
importance = TRUE, ntree = 1000, cp = 0.005)
pred = predict(rf, newdata = test)
mean(pred != test$delta)
rf = randomForest(delta ~ favorites + retweets + ss_compound + topic + presidency,
data = train, mtry = floor(sqrt(5)),
importance = TRUE, ntree = 1000, cp = 0.001)
pred = predict(rf, newdata = test)
mean(pred != test$delta)
rf = randomForest(delta ~ favorites + retweets + ss_compound + topic + presidency,
data = train, mtry = floor(sqrt(5)),
importance = TRUE, ntree = 1000, cp = 0.004)
pred = predict(rf, newdata = test)
mean(pred != test$delta)
varImpPlot(rf)
View(dat)
# Plot for ss_compound: ----
ggplot(dat, aes(x = topic, y = ss_compound)) +
geom_boxplot()
library(tidyverse)
# Plot for ss_compound: ----
g1 = ggplot(dat, aes(x = topic, y = ss_compound)) +
geom_boxplot()
g1
g2 = ggplot(dat, aes(x = presidency, y = ss_compound)) +
geom_boxplot()
g2
ggpubr::ggarrange(g1, g2)
?ggpubr::ggarrange
1 - 0.4056
# Plot for ss_compound: ----
theme_set(theme_bw())
dat %>% select(retweets, favorites, ss_compound, delta) %>%
pivot_longer(cols = 1:3)
dat %>% select(retweets, favorites, ss_compound, delta) %>%
pivot_longer(cols = 1:3) %>%
ggplot(aes(x = as.factor(delta), y = value)) +
geom_boxplot() +
facet_wrap(name~.)
?facet_wrap
dat %>% select(retweets, favorites, ss_compound, delta) %>%
pivot_longer(cols = 1:3) %>%
ggplot(aes(x = as.factor(delta), y = value)) +
geom_boxplot() + xlab("delta") +
facet_wrap(name~., scales = "free_y")
g1 = ggplot(dat, aes(x = topic, y = ss_compound)) +
geom_boxplot()
g2 = ggplot(dat, aes(x = presidency, y = ss_compound)) +
geom_boxplot()
ggpubr::ggarrange(g1, g2)
dat %>% select(topic, presidency, ss_compound) %>%
pivot_longer(cols = 1:2)
dat %>% select(topic, presidency, ss_compound) %>%
pivot_longer(cols = 1:2) %>%
ggplot(dat, aes(x = value, y = ss_compound)) +
geom_boxplot() +
facet_wrap(name~.)
dat %>% select(topic, presidency, ss_compound) %>%
pivot_longer(cols = 1:2) %>%
ggplot(dat, aes(x = value, y = ss_compound)) +
geom_boxplot() +
facet_wrap(name~.)
dat %>% select(topic, presidency, ss_compound) %>%
pivot_longer(cols = 1:2) %>%
ggplot(aes(x = value, y = ss_compound)) +
geom_boxplot() +
facet_wrap(name~.)
ggpubr::ggarrange(g1, g2)
?ggpubr::ggarrange
library(gridExtra)
?grid.arrange
grid.arrange(g1, g2,
grobs = gl,
widths = c(2, 1))
grid.arrange()
grid.arrange(
grobs = list(g1, g2),
widths = c(2, 1))
dat %>% select(topic, ss_compound) %>%
ggplot(aes(x = topic, y = ss_compound)) +
geom_boxplot() +
facet_wrap(topic~.)
dat %>% select(topic, ss_compound) %>%
ggplot(aes(x = topic, y = ss_compound)) +
geom_boxplot() +
facet_wrap(~.)
?facet_wrap
dat %>% select(topic, ss_compound) %>%
ggplot(aes(x = topic, y = ss_compound)) +
geom_boxplot() +
facet_wrap(~., labeller = "Topic")
dat %>% select(topic, ss_compound) %>%
ggplot(aes(x = topic, y = ss_compound)) +
geom_boxplot() +
facet_wrap(~)
# Plot for words: ----
library(tidytext)
dat %>% select(text) %>%
unnest_tokens(word, text, token = "regex", pattern = reg) %>%
filter(!word %in% stop_words$word, str_detect(word, "[a-z]"))
reg <- "([^A-Za-z\\d#@']|'(?![A-Za-z\\d#@]))"
dat %>% select(text) %>%
unnest_tokens(word, text, token = "regex", pattern = reg) %>%
filter(!word %in% stop_words$word, str_detect(word, "[a-z]"))
dat %>% select(text) %>%
unnest_tokens(word, text, token = "regex", pattern = reg) %>%
filter(!word %in% stop_words$word, str_detect(word, "[a-z]")) %>%
count(word, sort = TRUE) %>%
head(25)
dat %>% select(text) %>%
unnest_tokens(word, text, token = "regex", pattern = reg) %>%
filter(!word %in% stop_words$word, str_detect(word, "[a-z]")) %>%
count(word, sort = TRUE) %>%
head(30) %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(x = word, y = n, fill = word)) +
geom_bar(stat = "identity") + guides(fill = FALSE) +
ylab("Occurrences") + coord_flip()
reg <- "([^A-Za-z\\d#@']|'(?![A-Za-z\\d#@]))|201c|201d|wa|ha"
dat %>% select(text) %>%
unnest_tokens(word, text, token = "regex", pattern = reg) %>%
filter(!word %in% stop_words$word, str_detect(word, "[a-z]")) %>%
count(word, sort = TRUE) %>%
head(30) %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(x = word, y = n, fill = word)) +
geom_bar(stat = "identity") + guides(fill = FALSE) +
ylab("Occurrences") + coord_flip()
reg <- "([^A-Za-z\\d#@']|'(?![A-Za-z\\d#@]))|201c|201d|wa|ha|ve|nk|nks|nt|ll"
dat %>% select(text) %>%
unnest_tokens(word, text, token = "regex", pattern = reg) %>%
filter(!word %in% stop_words$word, str_detect(word, "[a-z]")) %>%
count(word, sort = TRUE) %>%
head(30) %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(x = word, y = n, fill = word)) +
geom_bar(stat = "identity") + guides(fill = FALSE) +
ylab("Occurrences") + coord_flip()
setwd("/Users/Amy/Desktop/Stat503/group_proj")
tweets = read.csv("./data/trumptweets_original.csv")
col = c("content", "date", "retweets", "favorites")
tweets = tweets[col]
tweets$day = as.Date(tweets$date, format = "%Y-%m-%d")
new_id = data.frame(day = unique(tweets$day), new_id = 1:length(unique(tweets$day)))
tweets = inner_join(new_id, tweets, by = "day")
knitr::opts_chunk$set(message = FALSE, echo = F, warning = FALSE,
result = "asis")
tweets %>%
count(hour = hour(date)) %>%
mutate(percent = n / sum(n)) %>%
ggplot(aes(x = hour, y = percent)) +
geom_line() +
scale_y_continuous(labels = percent_format()) +
labs(x = "Hour of day (EST)",
y = "% of tweets")
library(lubridate)
library(scales)
tweets %>%
count(hour = hour(date)) %>%
mutate(percent = n / sum(n)) %>%
ggplot(aes(x = hour, y = percent)) +
geom_line() +
scale_y_continuous(labels = percent_format()) +
labs(x = "Hour of day (EST)",
y = "% of tweets")
reg <- "([^A-Za-z\\d#@']|'(?![A-Za-z\\d#@]))"
tweets_words = tweets %>%
mutate(
text = str_remove_all(content,
"https?://[A-Za-z\\d///.]+|[//\\d]+|\"+|/<+|/>+|//.+&amp+")
) %>%
unnest_tokens(word, text, token = "regex", pattern = reg) %>%
filter(!word %in% stop_words$word, str_detect(word, "[a-z]"))
tweets_words %>%
count(word, sort = TRUE) %>%
head(25) %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(x = word, y = n, fill = word)) +
geom_bar(stat = "identity") + guides(fill = FALSE) +
ylab("Occurrences") + coord_flip()
tweets_words %>%
count(word, sort = TRUE) %>%
head(25) %>%
mutate(word = reorder(word, n))
View(tweets_words)
tweets_words %>%
count(word, sort = TRUE) %>%
head(25)
tweets_words %>%
count(word, sort = TRUE) %>%
head(25) %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(x = word, y = n)) +
geom_bar(stat = "identity") + guides(fill = FALSE) +
ylab("Occurrences") + coord_flip()
tweets_words %>%
left_join(dat[, c(1, 5, 13, 14)], by = new_id)
tweets_words %>%
left_join(dat[, c(1, 5, 13, 14)], by = "new_id")
tweets_words %>%
left_join(dat[, c(1, 5, 13, 14)], by = "new_id") %>%
count(word, sort = TRUE)
tweets_words %>%
left_join(dat[, c(1, 5, 13, 14)], by = "new_id") %>%
count(topic, word, sort = TRUE)
tweets_words %>%
left_join(dat[, c(1, 5, 13, 14)], by = "new_id") %>%
count(c(topic, word,) sort = TRUE)
tweets_words %>%
left_join(dat[, c(1, 5, 13, 14)], by = "new_id") %>%
add_count(topic, word, sort = TRUE)
tweets_words %>%
left_join(dat[, c(1, 6, 13, 14)], by = "new_id") %>%
add_count(topic, word, sort = TRUE)
tweets_words %>%
left_join(dat[, c(1, 6, 13, 14)], by = "new_id") %>%
drop_na() %>%
add_count(topic, word, sort = TRUE)
tweets_words %>%
left_join(dat[, c(1, 6, 13, 14)], by = "new_id") %>%
drop_na() %>%
add_count(topic, word, sort = TRUE) %>%
head(25) %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(x = word, y = n, fill = topic)) +
geom_bar(stat = "identity") + guides(fill = FALSE) +
ylab("Occurrences") + coord_flip()
d = tweets_words %>%
left_join(dat[, c(1, 6, 13, 14)], by = "new_id") %>%
drop_na() %>%
add_count(topic, word, sort = TRUE)
View(d)
tweets_words %>%
left_join(dat[, c(1, 14)], by = "new_id") %>%
drop_na() %>%
add_count(topic, word, sort = TRUE) %>%
head(25) %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(x = word, y = n, fill = topic)) +
geom_bar(stat = "identity") + guides(fill = FALSE) +
ylab("Occurrences") + coord_flip()
tweets_words %>%
left_join(dat[, c(1, 14)], by = "new_id") %>%
drop_na() %>%
add_count(topic, word, sort = TRUE) %>%
head(25) %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(x = word, y = n, fill = delta)) +
geom_bar(stat = "identity") + guides(fill = FALSE) +
ylab("Occurrences") + coord_flip()
tweets_words %>%
left_join(dat[, c(1, 14)], by = "new_id") %>%
drop_na() %>%
add_count(delta, word, sort = TRUE)
tweets_words %>%
left_join(dat[, c(1, 13)], by = "new_id") %>%
drop_na() %>%
add_count(delta, word, sort = TRUE)
tweets_words %>%
select(new_id, word) %>%
left_join(dat[, c(1, 13)], by = "new_id")
tweets_words %>%
select(new_id, word) %>%
left_join(dat[, c(1, 13)], by = "new_id") %>%
drop_na()
tweets_words %>%
select(new_id, word) %>%
left_join(dat[, c(1, 13)], by = "new_id") %>%
drop_na() %>%
add_count(delta, word, sort = TRUE)
tweets_words %>%
select(new_id, word) %>%
left_join(dat[, c(1, 13)], by = "new_id") %>%
drop_na() %>%
count(delta, word, sort = TRUE)
tweets_words %>%
select(new_id, word) %>%
left_join(dat[, c(1, 13)], by = "new_id") %>%
drop_na() %>%
count(delta, word, sort = TRUE) %>%
head(30) %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(x = word, y = n, fill = delta)) +
geom_bar(stat = "identity") + guides(fill = FALSE) +
ylab("Occurrences") + coord_flip()
tweets_words %>%
select(new_id, word) %>%
left_join(dat[, c(1, 13)], by = "new_id") %>%
drop_na() %>%
count(delta, word, sort = TRUE) %>%
complete(delta)
tweets_words %>%
select(new_id, word) %>%
left_join(dat[, c(1, 13)], by = "new_id") %>%
drop_na() %>%
count(delta, word, sort = TRUE)
tweets_words %>%
select(new_id, word) %>%
left_join(dat[, c(1, 13)], by = "new_id") %>%
drop_na() %>%
count(delta, word, sort = TRUE) %>%
head(25) %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(x = word, y = n, fill = delta)) +
geom_bar(stat = "identity") +
#guides(fill = FALSE) +
ylab("Occurrences") + coord_flip()
tweets_words %>%
select(new_id, word) %>%
left_join(dat[, c(1, 13)], by = "new_id") %>%
drop_na() %>%
count(delta, word, sort = TRUE) %>%
head(25) %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(x = word, y = n, fill = as.factor(delta))) +
geom_bar(stat = "identity") +
#guides(fill = FALSE) +
ylab("Occurrences") + coord_flip()
tweets_words %>%
select(new_id, word) %>%
left_join(dat[, c(1, 13)], by = "new_id") %>%
drop_na() %>%
count(delta, word, sort = TRUE) %>%
head(25) %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(x = word, y = n, fill = as.factor(delta))) +
geom_bar(stat = "identity") + legend(fill = "S&P Indicator")
tweets_words %>%
select(new_id, word) %>%
left_join(dat[, c(1, 13)], by = "new_id") %>%
drop_na() %>%
count(delta, word, sort = TRUE) %>%
head(25) %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(x = word, y = n, fill = as.factor(delta))) +
geom_bar(stat = "identity") + labs(fill = "S&P Indicator")
tweets_words %>%
select(new_id, word) %>%
left_join(dat[, c(1, 13)], by = "new_id") %>%
drop_na() %>%
count(delta, word, sort = TRUE) %>%
head(25) %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(x = word, y = n, fill = as.factor(delta))) +
geom_bar(stat = "identity") + labs(fill = "S&P Indicator") +
ylab("Occurrences") + coord_flip()
tweets_words %>%
select(new_id, word) %>%
left_join(dat[, c(1, 14)], by = "new_id") %>%
drop_na() %>%
count(presidency, word, sort = TRUE) %>%
head(25) %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(x = word, y = n, fill = as.factor(presidency))) +
geom_bar(stat = "identity") + labs(fill = "Presidency") +
ylab("Occurrences") + coord_flip()
tweets_words %>%
select(new_id, word) %>%
left_join(dat[, c(1, 14)], by = "new_id") %>%
drop_na() %>%
count(presidency, word, sort = TRUE) %>%
head(25) %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(x = word, y = n, fill = presidency)) +
geom_bar(stat = "identity") + labs(fill = "Presidency") +
ylab("Occurrences") + coord_flip()
tweets_words %>%
select(new_id, word) %>%
left_join(dat[, c(1, 14)], by = "new_id")
dat %>% select(retweets, favorites, ss_compound, delta) %>%
pivot_longer(cols = 1:3) %>%
ggplot(aes(x = as.factor(delta), y = value)) +
geom_boxplot() + xlab("S&P Indicator") +
facet_wrap(name~., scales = "free_y")
dat %>% select(retweets, favorites, ss_compound, delta) %>%
pivot_longer(cols = 1:3) %>%
ggplot(aes(x = as.factor(delta), y = value)) +
geom_boxplot() + xlab("S&P Indicator") +
facet_wrap(name~., scales = "free_y")
# Pairs plot: ----
vars = c("retweets", "favorites", "ss_compound", "topic", "delta", "presidency")
# Pairs plot: ----
vars = c("retweets", "favorites", "ss_compound", "topic", "presidency")
pairs(dat[, vars], col = c("green", "red")[dat$delta],
pch = c(1, 2)[dat$delta]])
pairs(dat[, vars], col = c("green", "red")[dat$delta],
pch = c(1, 2)[dat$delta])
dat$delta
table(dat$delta)
par(xpd = TRUE) # specifies where in the plotting device an object can actually be plotted.
legend(.34, .51, as.vector(unique(train$Survived)),
col = c("green", "red"), pch=1:3, cex = .5)
c("green", "red")[dat$delta]
d = c("green", "red")[dat$delta]
table(d)
table(dat$delta)
c("green", "red")[dat$delta]+1
table(c("green", "red")[dat$delta+1])
# Pairs plot: ----
vars = c("retweets", "favorites", "ss_compound", "topic", "presidency")
pairs(dat[, vars], col = c("green", "red")[dat$delta+1],
pch = c(1, 2)[dat$delta+1])
par(xpd = TRUE) # specifies where in the plotting device an object can actually be plotted.
legend(.34, .51, as.vector(unique(dat$delta)),
col = c("green", "red"), pch=1:3, cex = .5)
vars = c("retweets", "favorites", "ss_compound", "topic", "presidency")
pairs(dat[, vars], col = c("green", "red")[dat$delta+1],
pch = c(1, 2)[dat$delta+1])
par(xpd = TRUE) # specifies where in the plotting device an object can actually be plotted.
legend(.34, .51, as.vector(unique(dat$delta)),
col = c("green", "red"), pch=1:3, cex = .5)
vars = c("retweets", "favorites", "ss_compound", "topic", "presidency")
pairs(dat[, vars], col = c("green", "red")[dat$delta+1],
pch = c(1, 2)[dat$delta+1])
par(xpd = TRUE) # specifies where in the plotting device an object can actually be plotted.
legend(.51, .51, as.vector(unique(dat$delta)),
col = c("green", "red"), pch=1:3, cex = .5)
legend(.51, .51, as.vector(unique(dat$delta)),
col = c("green", "red"), pch=1:3, cex = .5)
as.vector(unique(dat$delta))
as.vector(unique(dat$delta)+1)
par(xpd = TRUE) # specifies where in the plotting device an object can actually be plotted.
legend(.51, .51, as.vector(unique(dat$delta)+1),
col = c("green", "red"), pch=1:3, cex = .5)
vars = c("retweets", "favorites", "ss_compound", "topic", "presidency")
pairs(dat[, vars], col = c("green", "red")[dat$delta+1],
pch = c(1, 2)[dat$delta+1])
par(xpd = TRUE) # specifies where in the plotting device an object can actually be plotted.
legend(.51, .51, as.vector(unique(dat$delta)+1),
col = c("green", "red"), pch=1:3, cex = .5)
legend(.34, .51, as.vector(unique(dat$delta)+1),
col = c("green", "red"), pch=1:2, cex = .5)
par(xpd = NA) # specifies where in the plotting device an object can actually be plotted.
legend(.34, .51, as.vector(unique(dat$delta)+1),
col = c("green", "red"), pch=1:2, cex = .5)
par(xpd = TRUE) # specifies where in the plotting device an object can actually be plotted.
legend(.34, .51, as.vector(unique(dat$delta)+1),
col = c("green", "red"), pch=1:2, cex = .5)
pairs(dat[, vars], col = c("green", "red")[dat$delta+1],
pch = c(1, 2)[dat$delta+1])
par(xpd = TRUE) # specifies where in the plotting device an object can actually be plotted.
legend(.34, .51, as.vector(unique(dat$delta)+1),
col = c("green", "red"), pch=1:2, cex = .5)
par(xpd = NA) # specifies where in the plotting device an object can actually be plotted.
legend(.5, .51, as.vector(unique(dat$delta)+1),
col = c("green", "red"), pch=1:2, cex = .5)
legend(.01, .55, as.vector(unique(dat$delta)+1),
col = c("green", "red"), pch=1:2, cex = .5)
legend(.45, .55, as.vector(unique(dat$delta)+1),
col = c("green", "red"), pch=1:2, cex = .5)
pairs(dat[, vars], col = c("green", "red")[dat$delta+1],
pch = c(1, 2)[dat$delta+1])
legend(.4, .55, as.vector(unique(dat$delta)+1),
col = c("green", "red"), pch=1:2, cex = .5)
pairs(dat[, vars], col = c("green", "red")[dat$delta+1],
pch = c(1, 2)[dat$delta+1])
legend(.4, .55, as.vector(unique(dat$delta)),
col = c("green", "red"), pch=1:2, cex = .5)
pairs(dat[, vars], col = c("green", "red")[dat$delta+1],
pch = c(1, 2)[dat$delta+1])
legend(.4, .55, as.vector(unique(dat$delta)),
col = c("red", "green"), pch=1:2, cex = .5)
